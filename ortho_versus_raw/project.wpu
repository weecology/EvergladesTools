#!wing
#!version=7.0
##################################################################
# Wing project file : User-specific branch                       #
##################################################################
[user attributes]
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'BeCfPquEZeqQ6pfJCERhTaNA7C'\
        'a3fCTw',
        'size-state': '',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.3243697478991596,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [(0,),
        (0,
         0)],
                                 'selected-nodes': [],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {'tree-states': {'__all__': [],
        u'c': [],
        u'django': [],
        u'html': [],
        u'py': []}}),
                              ('code-warnings',
                               'tall',
                               0,
                               {}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [3,
                          5],
        'notebook_display': 'normal',
        'notebook_percent': 0.5695296523517382,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': u'',
                                       'fReverse': False,
                                       'fSearchText': u'',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('testing',
                      'wide',
                      0,
                      {'added-files': [loc('tests/test_evaluate.py')],
                       'filter': u'',
                       'recent-filters': None,
                       'sort-order': 'source-lineno',
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': u'self.TreeDataset',
                                       'fReverse': False,
                                       'fSearchText': u'training_step',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False}}),
                     ('uses',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'code-line': '',
                       'first-line': 1527L,
                       'folded-linenos': [],
                       'history': {u'file:/Applications/WingPro.app/Contents/Resources/src/testing/runners/run_pytest_xml.py': ['s'\
        'elected_unlabeled_yhat[0,:]\n',
        'selected_unlabeled_yhat[0,:].argmin()\n',
        'selected_unlabeled_yhat[0,:].argmax()\n',
        'y_pred_selected_unlabeled\n',
        'selected_unlabeled_yhat\n',
        'psuedo_label = torch.argmax(selected_weak_y, dim=1)\n',
        'psuedo_label\n',
        'selected_weak_y\n',
        '1 \n',
        'a=1\n',
        'a+=1\n',
        'a\n',
        'transformed = np.zeros((len(self.scaling) * 2, ) + data.shape)\n',
        'len(self.scaling)\n',
        'self.scaling\n',
        'self.per_band_average = np.average(data, axis=1)\n',
        'self.per_band_average = np.average(data, axis=0)\n',
        'self.per_band_average = np.average(data, axis=-1)\n',
        'self.per_band_average = np.average(data, axis=[0,2,3])\n',
        'self.per_band_average = np.average(data, axis=[0,2,3])',
        'self.per_band_average = np.average(data, axis=[0,1,2])\n',
        'self.per_band_average = np.average(data, axis=[-1])\n',
        'np.average(data, axis=1).shape\n',
        'np.average(data, axis=2).shape\n',
        'np.average(data, axis=3).shape\n',
        'np.average(data, axis=4).shape\n',
        'np.average(data, axis=0-).shape\n',
        'np.average(data, axis=0).shape\n',
        'self.per_band_average = np.mean(data, axis=[0,1,2,3])\n',
        'self.per_band_average = np.mean(data, axis=[0,2,3])\n',
        'self.per_band_average = np.mean(data, axis=(0,2,3))\n',
        'self.per_band_average = np.mean(data, axis=(0,2,3))',
        'data.mean(axis=(0,2,3))\n',
        'data.mean(axis=(0,2,3)).shape\n',
        '(self.per_band_average * scale)\n',
        '(self.per_band_average * scale).shape\n',
        'self.per_band_average\n',
        'self.per_band_average.shape\n',
        'scale\n',
        'self.per_band_average * scale.shape\n',
        'self.per_band_average * scale\n',
        'data\n',
        'data.shape\n',
        'transformed\n',
        'transformed.shape\n',
        'predictions.shape\n',
        'm\n',
        'predictions\n',
        'predictions[0][0]\n',
        'predictions[0][1]\n',
        'predictions[0][1].shape\n',
        'predictions[0][2][-1]\n',
        'predictions[0][1][-1]\n',
        'predictions[1]\n',
        'predictions[0]\n',
        ' trainer.logged_metrics\n',
        ' trainer.logged_metrics.keys()\n',
        ' trainer.logged_metrics["loss"] \n',
        '    trainer.logged_metrics["train_loss_0"]  \n',
        'import torch\n',
        '    torch.isnan(trainer.logged_metrics["train_loss_0"])\n',
        '    assert not torch.isnan(trainer.logged_metrics["train_loss_0"])'\
        '\n',
        'tail_classes\n',
        'level_label_dicts[0]\n',
        'df.taxonID.value_counts()\n',
        'self.config["head_class_minimum_samples"]\n',
        'level_0 = df.copy()\n',
        'level_0\n',
        'common_species = level_0.taxonID.value_counts().reset_index()\n',
        'common_species.taxonID > self.config["head_class_minimum_samples"]'\
        '\n',
        'common_species = common_species[common_species.taxonID > self.confi'\
        'g["head_class_minimum_samples"]]["index"]\n',
        'level_label_dicts.append({value:key for key, value in enumerate(com'\
        'mon_species)})\n',
        'common_species\n',
        'level_0.taxonID\n',
        'level_0.taxonID.value_counts()\n',
        'common_species.taxonID\n',
        'head_classes\n',
        'head_classes.taxonID.value_counts()\n',
        'ta\n',
        'head_classes = level_0[level_0.taxonID.isin(common_species)]\n',
        '#Split tail classes into conifer and broadleaf\ntail_classes = leve'\
        'l_0[~level_0.taxonID.isin(common_species)]\nneedleleaf = self.taxon'\
        'omy[self.taxonomy.families=="Pinidae"].taxonID\nneedleleaf = needle'\
        'leaf[~needleleaf.isin(common_species)]\nbroadleaf = self.taxonomy[~'\
        '(self.taxonomy.families=="Pinidae")].taxonID\nbroadleaf = broadleaf'\
        '[~broadleaf.isin(common_species)]\ntail_classes.loc[tail_classes.ta'\
        'xonID.isin(needleleaf),"taxonID"] = "CONIFER"\ntail_classes.loc[tai'\
        'l_classes.taxonID.isin(broadleaf),"taxonID"] = "BROADLEAF"\n\n',
        'taxonomy\n',
        'self.taxonomy\n',
        'self.config["crop_dir"]\n',
        'row["image_path"]\n',
        'row\n',
        'self.annotations\n',
        'self.annotations.iloc[0]\n',
        'self.semi_supervised_train\n',
        'self.semi_supervised_train.iloc[0]\n',
        'level_dataset = self.semi_supervised_train[self.semi_supervised_tra'\
        'in.taxonID.isin(level_taxonIDs)]\n',
        'level_taxonIDs\n',
        'self.semi_supervised_train.taxonID\n',
        'semi_supervised_train.iloc[0]\n',
        'level_dataset = self.semi_supervised_train[self.semi_supervised_tra'\
        'in.ensembleTaxonID.isin(level_taxonIDs)]\n',
        'level_dataset\n',
        'level_dataset.iloc[0]\n',
        'unlabeled_ds = data.TreeDataset(\n    df=level_dataset,\n    config'\
        '=semi_supervised_config,\n    train=True\n)\n\n',
        'unlabeled_ds\n',
        'unlabeled_ds[0]\n']},
                       'launch-id': None,
                       'sel-line': 1558L,
                       'sel-line-start': 80461L,
                       'selection_end': 80461L,
                       'selection_start': 80461L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'code-line': '',
                       'first-line': 47L,
                       'folded-linenos': [],
                       'history': {None: ['1 * 1 + None\n',
        '1 + 1 * None\n',
        '# Convert photoshop to .shp files\nimport pandas as pd\nimport geop'\
        'andas as gpd\nimport rasterio as rio\n\ncsv_file = pd.read_csv("/Us'\
        'ers/benweinstein/Dropbox/Weecology/everglades_species/Raw_versus_Or'\
        'tho/Vulture_03_28_2022.csv")\nraster = rio.open("/Users/benweinstei'\
        'n/Dropbox/Weecology/everglades_species/Raw_versus_Ortho/Vulture_03_'\
        '28_2022.tif")\n\n',
        'csv.head()\n',
        'csv_file.head()\n',
        'import deepforest\nimport pandas as pd\nimport rasterio\nimport mat'\
        'plotlib.pyplot as plt\nfrom deepforest import visualize\nfrom deepf'\
        'orest.utilities import annotations_to_shapefile\nimport numpy as np'\
        '\nimport glob\nimport os\n\ndf = pd.read_csv("/Users/benweinstein/D'\
        'ropbox/Weecology/everglades_species/Raw_versus_Ortho/Vulture_03_28_'\
        '2022.csv")\ntransform = rasterio.open("/Users/benweinstein/Dropbox/'\
        'Weecology/everglades_species/Raw_versus_Ortho/Vulture_03_28_2022.ti'\
        'f").transform\ncrs = None\nshp = annotations_to_shapefile(df, trans'\
        'form, crs)\n\n',
        'df\n',
        'df.iloc[0]\n']},
                       'launch-id': None,
                       'sel-line': 72L,
                       'sel-line-start': 3881L,
                       'selection_end': 3881L,
                       'selection_start': 3881L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {'filter-text': ''}),
                     ('messages',
                      'wide',
                      2,
                      {'current-domain': 0}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('tests/test_evaluate.py'),
        {'attrib-starts': [('test_compare_tiles_and_orthos|0|',
                            22)],
         'code-line': '    predictions = evaluate.compare_tiles_and_orthos(m'\
                      'odel, tile_path="{}/tests/data/sample_tile.png".forma'\
                      't(ROOT))\n',
         'first-line': 4L,
         'folded-linenos': [],
         'sel-line': 23L,
         'sel-line-start': 633L,
         'selection_end': 747L,
         'selection_start': 633L,
         'zoom': 0L},
        1672858979.701521],
        [loc('evaluate.py'),
         {'attrib-starts': [('compare_tiles_and_orthos|0|',
                             36)],
          'code-line': 'def compare_tiles_and_orthos(model, tile_paths): \n',
          'first-line': 33L,
          'folded-linenos': [],
          'sel-line': 36L,
          'sel-line-start': 1012L,
          'selection_end': 1040L,
          'selection_start': 1016L,
          'zoom': 0L},
         1672858982.177602],
        [loc('tests/test_evaluate.py'),
         {'attrib-starts': [('test_compare_tiles_and_orthos|0|',
                             22)],
          'code-line': '    predictions = evaluate.compare_tiles_and_orthos('\
                       'model, tile_path="{}/tests/data/sample_tile.png".for'\
                       'mat(ROOT))\n',
          'first-line': 4L,
          'folded-linenos': [],
          'sel-line': 23L,
          'sel-line-start': 633L,
          'selection_end': 747L,
          'selection_start': 633L,
          'zoom': 0L},
         1672858982.196351],
        [loc('tests/test_evaluate.py'),
         {'attrib-starts': [('test_compare_tiles_and_orthos|0|',
                             22)],
          'code-line': '    predictions = evaluate.compare_tiles_and_orthos('\
                       'model, tile_path=["{}/tests/data/sample_tile.png".fo'\
                       'rmat(ROOT)])\n',
          'first-line': 5L,
          'folded-linenos': [],
          'sel-line': 23L,
          'sel-line-start': 633L,
          'selection_end': 748L,
          'selection_start': 748L,
          'zoom': 0L},
         1672858989.057705],
        [loc('tests/test_evaluate.py'),
         {'attrib-starts': [('test_compare_tiles_and_orthos|0|',
                             22)],
          'code-line': 'def test_compare_tiles_and_orthos(model):\n',
          'first-line': 4L,
          'folded-linenos': [],
          'sel-line': 22L,
          'sel-line-start': 591L,
          'selection_end': 632L,
          'selection_start': 591L,
          'zoom': 0L},
         1672858990.400567],
        [loc('evaluate.py'),
         {'attrib-starts': [('compare_tiles_and_orthos|0|',
                             36)],
          'code-line': '    """\n',
          'first-line': 49L,
          'folded-linenos': [],
          'sel-line': 40L,
          'sel-line-start': 1273L,
          'selection_end': 1280L,
          'selection_start': 1280L,
          'zoom': 0L},
         1672860133.924694],
        [loc('tests/test_evaluate.py'),
         {'attrib-starts': [('test_compare_tiles_and_orthos|0|',
                             22)],
          'code-line': 'def test_compare_tiles_and_orthos(model):\n',
          'first-line': 4L,
          'folded-linenos': [],
          'sel-line': 22L,
          'sel-line-start': 591L,
          'selection_end': 632L,
          'selection_start': 591L,
          'zoom': 0L},
         1672860133.979268],
        [loc('tests/test_evaluate.py'),
         {'attrib-starts': [('test_compare_tiles_and_orthos|0|',
                             22)],
          'code-line': '    predictions = evaluate.compare_tiles_and_orthos('\
                       'model, tile_paths=["{}/tests/data/sample_tile.png".f'\
                       'ormat(ROOT)])\n',
          'first-line': 6L,
          'folded-linenos': [],
          'sel-line': 23L,
          'sel-line-start': 633L,
          'selection_end': 702L,
          'selection_start': 702L,
          'zoom': 0L},
         1672860773.62939],
        [loc('tests/test_evaluate.py'),
         {'attrib-starts': [('model|0|',
                             8)],
          'code-line': '    model = main.deepforest() \n',
          'first-line': 7L,
          'folded-linenos': [],
          'sel-line': 9L,
          'sel-line-start': 161L,
          'selection_end': 191L,
          'selection_start': 191L,
          'zoom': 0L},
         1672861862.095103],
        [loc('run.py'),
         {'attrib-starts': [],
          'code-line': '',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 1L,
          'sel-line-start': 16L,
          'selection_end': 16L,
          'selection_start': 16L,
          'zoom': 0L},
         1672861881.418087],
        [loc('run.py'),
         {'attrib-starts': [],
          'code-line': '    "/Users/benweinstein/Dropbox/Weecology/everglade'\
                       's_species/Raw_versus_Ortho/Vulture_03_28_2022.tif"\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 7L,
          'sel-line-start': 104L,
          'selection_end': 123L,
          'selection_start': 123L,
          'zoom': 0L},
         1673044185.724577],
        [loc('convert_annotations.py'),
         {'attrib-starts': [],
          'code-line': '# Convert photoshop to .shp files',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 0L,
          'sel-line-start': 0L,
          'selection_end': 33L,
          'selection_start': 33L,
          'zoom': 0L},
         1673044208.216096],
        [loc('convert_annotations.py'),
         {'attrib-starts': [],
          'code-line': '',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 7L,
          'sel-line-start': 343L,
          'selection_end': 343L,
          'selection_start': 343L,
          'zoom': 0L},
         1673044395.823551],
        [loc('../photoshop/view_annotations.py'),
         {'attrib-starts': [],
          'code-line': 'import matplotlib.pyplot as plt\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 3L,
          'sel-line-start': 54L,
          'selection_end': 85L,
          'selection_start': 85L,
          'zoom': 0L},
         1673044427.88093],
        [loc('__init__.py'),
         {'attrib-starts': [],
          'code-line': '#Init module',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 0L,
          'sel-line-start': 0L,
          'selection_end': 12L,
          'selection_start': 12L,
          'zoom': 0L},
         1673044429.493132],
        [loc('../photoshop/view_annotations.py'),
         {'attrib-starts': [],
          'code-line': 'import matplotlib.pyplot as plt\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 3L,
          'sel-line-start': 54L,
          'selection_end': 85L,
          'selection_start': 85L,
          'zoom': 0L},
         1673044433.608683],
        [loc('convert_annotations.py'),
         {'attrib-starts': [],
          'code-line': 'csv_file = pd.read_csv("/Users/benweinstein/Dropbox/'\
                       'Weecology/everglades_species/Raw_versus_Ortho/Vultur'\
                       'e_03_28_2022.csv")\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 5L,
          'sel-line-start': 102L,
          'selection_end': 222L,
          'selection_start': 126L,
          'zoom': 0L},
         1673044440.474907],
        [loc('../photoshop/view_annotations.py'),
         {'attrib-starts': [],
          'code-line': 'df = pd.read_csv("/Users/benweinstein/Dropbox/Weecol'\
                       'ogy/everglades_species/Raw_versus_Ortho/Vulture_03_2'\
                       '8_2022.csv")\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 10L,
          'sel-line-start': 219L,
          'selection_end': 333L,
          'selection_start': 333L,
          'zoom': 0L},
         1673044446.224195],
        [loc('convert_annotations.py'),
         {'attrib-starts': [],
          'code-line': 'raster = rio.open("/Users/benweinstein/Dropbox/Weeco'\
                       'logy/everglades_species/Raw_versus_Ortho/Vulture_03_'\
                       '28_2022.tif")\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 6L,
          'sel-line-start': 225L,
          'selection_end': 340L,
          'selection_start': 244L,
          'zoom': 0L},
         1673044450.409338],
        [loc('../photoshop/view_annotations.py'),
         {'attrib-starts': [],
          'code-line': 'crs = None\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 12L,
          'sel-line-start': 472L,
          'selection_end': 482L,
          'selection_start': 482L,
          'zoom': 0L},
         1673044505.022135]],
        20),
        'current-loc': loc('../photoshop/generate_data.py'),
        'editor-state-list': [(loc('convert_annotations.py'),
                               {'attrib-starts': [],
                                'code-line': 'raster = rio.open("/Users/benw'\
        'einstein/Dropbox/Weecology/everglades_species/Raw_versus_Ortho/Vult'\
        'ure_03_28_2022.tif")\n',
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 6L,
                                'sel-line-start': 225L,
                                'selection_end': 340L,
                                'selection_start': 244L,
                                'zoom': 0L}),
                              (loc('evaluate.py'),
                               {'attrib-starts': [('compare_tiles_and_orthos'\
        '|0|',
        36)],
                                'code-line': '    """\n',
                                'first-line': 49L,
                                'folded-linenos': [],
                                'sel-line': 40L,
                                'sel-line-start': 1273L,
                                'selection_end': 1280L,
                                'selection_start': 1280L,
                                'zoom': 0L}),
                              (loc('../../../.conda/envs/BirdDetector/lib/python3.9/site-packages/albumentations/augmentations/functional.py'),
                               {'attrib-starts': [('bbox_from_mask|0|',
        1008)],
                                'code-line': '    """Create bounding box fro'\
        'm binary mask (fast version)\n',
                                'first-line': 996L,
                                'folded-linenos': [],
                                'sel-line': 1009L,
                                'sel-line-start': 28466L,
                                'selection_end': 28466L,
                                'selection_start': 28466L,
                                'zoom': 0L}),
                              (loc('../photoshop/generate_data.py'),
                               {'attrib-starts': [('run|0|',
        102)],
                                'code-line': '            merged_boxes.to_cs'\
        'v("{}/raw_annotations.csv".format(base_dir))\n',
                                'first-line': 128L,
                                'folded-linenos': [],
                                'sel-line': 120L,
                                'sel-line-start': 4485L,
                                'selection_end': 4559L,
                                'selection_start': 4559L,
                                'zoom': 0L}),
                              (loc('../../../../../Applications/WingPro.app/Contents/Resources/doc/TOC'),
                               {'displayed-index': 0,
                                'viewer-state': {'history': [-1,
        0],
        'history-pos': 1,
        'index': 0,
        'top': 0,
        'top-left-pos': 0}}),
                              (loc('../../../.conda/envs/BirdDetector/lib/python3.9/site-packages/_pytest/python.py'),
                               {'attrib-starts': [('Module|0|',
        495),
        ('Module|0|._importtestmodule|0|',
         573)],
                                'code-line': '            raise self.Collect'\
        'Error(\n',
                                'first-line': 588L,
                                'folded-linenos': [],
                                'sel-line': 602L,
                                'sel-line-start': 22763L,
                                'selection_end': 22799L,
                                'selection_start': 22763L,
                                'zoom': 0L}),
                              (loc('run.py'),
                               {'attrib-starts': [],
                                'code-line': '    "/Users/benweinstein/Dropb'\
        'ox/Weecology/everglades_species/Raw_versus_Ortho/Vulture_03_28_2022'\
        '.tif"\n',
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 7L,
                                'sel-line-start': 104L,
                                'selection_end': 123L,
                                'selection_start': 123L,
                                'zoom': 0L}),
                              (loc('tests/test_evaluate.py'),
                               {'attrib-starts': [('model|0|',
        8)],
                                'code-line': '    model = main.deepforest() '\
        '\n',
                                'first-line': 7L,
                                'folded-linenos': [],
                                'sel-line': 9L,
                                'sel-line-start': 161L,
                                'selection_end': 191L,
                                'selection_start': 191L,
                                'zoom': 0L}),
                              (loc('../photoshop/view_annotations.py'),
                               {'attrib-starts': [],
                                'code-line': 'crs = None\n',
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 12L,
                                'sel-line-start': 472L,
                                'selection_end': 482L,
                                'selection_start': 482L,
                                'zoom': 0L})],
        'has-focus': True,
        'locked': False},
        [loc('convert_annotations.py'),
         loc('evaluate.py'),
         loc('../../../.conda/envs/BirdDetector/lib/python3.9/site-packages/albumentations/augmentations/functional.py'),
         loc('../photoshop/generate_data.py'),
         loc('../../../../../Applications/WingPro.app/Contents/Resources/doc/TOC'),
         loc('../../../.conda/envs/BirdDetector/lib/python3.9/site-packages/_pytest/python.py'),
         loc('run.py'),
         loc('tests/test_evaluate.py'),
         loc('../photoshop/view_annotations.py')]),
                               'open_files': [u'../../../../../Applications/WingPro.app/Contents/Resources/doc/TOC',
        u'../../../.conda/envs/BirdDetector/lib/python3.9/site-packages/_pytest/python.py',
        u'../../../.conda/envs/BirdDetector/lib/python3.9/site-packages/albumentations/augmentations/functional.py',
        u'evaluate.py',
        u'tests/test_evaluate.py',
        u'run.py',
        u'convert_annotations.py',
        u'../photoshop/view_annotations.py',
        u'../photoshop/generate_data.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.13253012048192772},
        'splits': 2,
        'tab_location': 'top',
        'traversal_pos': ((1,
                           5),
                          1673044366.679907),
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.6659619450317125},
                 'splits': 2,
                 'tab_location': 'left',
                 'traversal_pos': ((0,
                                    0),
                                   1672854096.696664),
                 'user_data': {}},
        'window-alloc': (0,
                         25,
                         1737,
                         1095)}]}
guimgr.recent-documents = [loc('../photoshop/generate_data.py'),
                           loc('../photoshop/view_annotations.py'),
                           loc('convert_annotations.py'),
                           loc('run.py'),
                           loc('tests/test_evaluate.py')]
guimgr.visual-state = {loc('../../../../../Applications/WingPro.app/Contents/Resources/src/testing/runners/run_pytest_xml.py'): {'a'\
        'ttrib-starts': [('RunInSingleDir|0|',
                          456)],
        'code-line': '    runner = wingtest_common.XmlTestRunner(result)\n',
        'first-line': 451L,
        'folded-linenos': [],
        'sel-line': 463L,
        'sel-line-start': 16281L,
        'selection_end': 16312L,
        'selection_start': 16312L,
        'zoom': 0L},
                       loc('../../../.conda/envs/BirdDetector/lib/python3.9/site-packages/cv2/mat_wrapper/__init__.py'): {'a'\
        'ttrib-starts': [],
        'code-line': '',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('__init__.py'): {'attrib-starts': [],
        'code-line': '#Init module',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 12L,
        'selection_start': 12L,
        'zoom': 0L}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('default',
                        [u''])}
proj.pyexec = {None: ('custom',
                      u'/Users/benweinstein/.conda/envs/BirdDetector/bin/python')}
proj.pypath = {None: ('custom',
                      [u'/Users/benweinstein/Documents/EvergladesTools/ortho_versus_raw'])}
proj.vcs-system-config = ('prefs',
                          {'bzr': {'versioncontrol.bzr.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.bzr.executable': u'bzr'},
                           'cvs': {'versioncontrol.cvs.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.cvs.executable': u'cvs',
                                   'versioncontrol.cvs.extra-global-args': '-'\
        'z3'},
                           'git': {'versioncontrol.git.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.git.executable': u'git',
                                   'versioncontrol.git.use-porcelain': True},
                           'hg': {'versioncontrol.hg.active': 'active-if-pro'\
        'ject-dir',
                                  'versioncontrol.hg.dont-find-unregistered': True,
                                  'versioncontrol.hg.executable': u'hg',
                                  'versioncontrol.hg.extra-global-args': '--'\
        'encoding=utf8'},
                           'perforce': {'versioncontrol.perforce.active': 'n'\
        'ot-active',
        'versioncontrol.perforce.dont-find-unregistered': True,
        'versioncontrol.perforce.executable': u'p4',
        'versioncontrol.perforce.extra-global-args': ''},
                           'svn': {'versioncontrol.svn.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.svn.executable': u'svn',
                                   'versioncontrol.svn.extra-global-args': '',
                                   'versioncontrol.svn.svnadmin-executable': u'svnadmin'}})
testing.stored-results = (1,
                          [(u'/Users/benweinstein/Documents/EvergladesTools/ortho_versus_raw/tests/test_evaluate.py',
                            [('test_predict_tile',
                              0,
                              None,
                              None,
                              None,
                              1672858769,
                              14),
                             ('test_predict_images',
                              0,
                              None,
                              None,
                              None,
                              1672858769,
                              18),
                             ('test_compare_tiles_and_orthos',
                              0,
                              None,
                              None,
                              None,
                              1672860783,
                              22)])],
                          {})
